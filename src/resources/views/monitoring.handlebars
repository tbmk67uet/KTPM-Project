<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Monitoring Dashboard</title>
    <link rel="stylesheet" href="css/main.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </head>
  <body>
    <div class="container">
      <!-- Sidebar -->
      <div class="sidebar">
        <h2>Dashboard</h2>
        <ul>
          <li id="overview" class="menu-item">Overview</li>
          <li id="containers" class="menu-item">Containers</li>
          <li id="apis" class="menu-item">APIs</li>
          <li id="resources" class="menu-item">Resource Monitoring</li>
        </ul>
      </div>

      <!-- Main content -->
      <div class="main-content">
        <!-- Header -->
        <div class="header">
          <h1>System Monitoring</h1>
          <div class="actions">
            <button id="refresh">Refresh</button>
          </div>
        </div>
        <div id="charts">
          <canvas id="cpuChart"></canvas>
          <canvas id="memoryChart"></canvas>
          <canvas id="bandwidthChart"></canvas>
        </div>

      </div>
    </div>

    <script>
      document.getElementById('overview').addEventListener('click', () => {
        window.location.href = 'http://localhost:3000'; });
      document.getElementById('containers').addEventListener('click', () => {
        window.location.href = 'http://localhost:3000/containers'; });
      document.getElementById('apis').addEventListener('click', () => {
        window.location.href = 'http://localhost:3000/apis'; });
      document.getElementById('resources').addEventListener('click', () => {
        window.location.href = 'http://localhost:3000/resources'; });
      document.getElementById('refresh').addEventListener('click', () => {
        location.reload(); 
      });

    async function fetchServerStats() {
      try {
        const response = await fetch('/api/server-stats');
        return await response.json();
      } catch (error) {
        console.error('Error fetching server stats:', error);
        return null;
      }
    }

    //CPU
    const cpuChartCtx = document.getElementById('cpuChart').getContext('2d');
    const cpuChart = new Chart(cpuChartCtx, {
      type: 'line',
      data: {
        labels: [], 
        datasets: [{
          label: 'CPU Load (%)',
          data: [],
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: 'Time' } },
          y: { title: { display: true, text: 'CPU Load (%)' } }
        }
      }
    });

    //Memory
    const memoryChartCtx = document.getElementById('memoryChart').getContext('2d');
    const memoryChart = new Chart(memoryChartCtx, {
      type: 'bar',
      data: {
        labels: ['Total Memory', 'Used Memory'],
        datasets: [{
          label: 'Memory (MB)',
          data: [],
          backgroundColor: ['rgba(54, 162, 235, 0.6)', 'rgba(255, 99, 132, 0.6)']
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: { title: { display: true, text: 'Memory (MB)' } }
        }
      }
    });

    //Bandwidth
    const bandwidthChartCtx = document.getElementById('bandwidthChart').getContext('2d');
    const bandwidthChart = new Chart(bandwidthChartCtx, {
      type: 'line',
      data: {
        labels: [], 
        datasets: [{
          label: 'Sent (KB/s)',
          data: [],
          borderColor: 'rgba(255, 206, 86, 1)',
          backgroundColor: 'rgba(255, 206, 86, 0.2)',
          tension: 0.1
        },
        {
          label: 'Received (KB/s)',
          data: [],
          borderColor: 'rgba(153, 102, 255, 1)',
          backgroundColor: 'rgba(153, 102, 255, 0.2)',
          tension: 0.1
        }]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: 'Time' } },
          y: { title: { display: true, text: 'Bandwidth (KB/s)' } }
        }
      }
    });

    
    async function updateCharts() {
      const stats = await fetchServerStats();
      if (!stats) return;

      const now = new Date().toLocaleTimeString();

      
      cpuChart.data.labels.push(now);
      cpuChart.data.datasets[0].data.push(stats.cpu);
      if (cpuChart.data.labels.length > 10) {
        cpuChart.data.labels.shift();
        cpuChart.data.datasets[0].data.shift();
      }
      cpuChart.update();

      //Memory
      memoryChart.data.datasets[0].data = [stats.memory.total, stats.memory.used];
      memoryChart.update();

      //Bandwidth
      bandwidthChart.data.labels.push(now);
      bandwidthChart.data.datasets[0].data.push(stats.bandwidth.sent);
      bandwidthChart.data.datasets[1].data.push(stats.bandwidth.received);
      if (bandwidthChart.data.labels.length > 10) {
        bandwidthChart.data.labels.shift();
        bandwidthChart.data.datasets[0].data.shift();
        bandwidthChart.data.datasets[1].data.shift();
      }
      bandwidthChart.update();
    }

    
    setInterval(updateCharts, 3000);
    updateCharts();

    </script>

  </body>
</html>